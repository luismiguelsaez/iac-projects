crds:
  enabled: true

prometheusOperator:
  enabled: true
  logFormat: logfmt
  logLevel: debug
  affinity: {}
  tolerations: []

prometheus:
  enabled: true
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::484308071187:role/eks-main-thanos-storage-ac85bb5
  thanosService:
    enabled: true
    type: ClusterIP
    clusterIP: None
    portName: grpc
    port: 10901
    targetPort: grpc
    httpPortName: http
    httpPort: 10902
    targetHttpPort: "http"
  thanosIngress:
    enabled: false
    ingressClassName: nginx-external
    hosts:
      - thanos-gateway.dev.lokalise.cloud
    paths:
      - /
    pathType: Prefix
  ingress:
    enabled: true
    ingressClassName: nginx-external
    hosts:
      - prometheus.dev.lokalise.cloud
    paths:
      - /
    pathType: Prefix
    tls: []
  prometheusSpec:
    replicas: 3
    replicaExternalLabelName: prometheus_replica
    prometheusExternalLabelName: prometheus_instance
    retention: 2h
    disableCompaction: true
    enableAdminAPI: true
    externalLabels:
      env: dev
    scrapeInterval: 15s
    scrapeTimeout: 14s
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    containers:
      - name: thanos
        image: quay.io/thanos/thanos:v0.32.2
        args:
          - sidecar
          - --log.level=info
          - --log.format=logfmt
          - --tsdb.path=/prometheus
          - --prometheus.url=http://localhost:9090
          - --http-address=0.0.0.0:10901
          - --grpc-address=0.0.0.0:10902
          #- |
          #  --objstore.config=type: FILESYSTEM
          #  config:
          #    directory: /prometheus
          #  prefix: objstore
          - |
            --objstore.config=type: S3
            config:
              bucket: thanos-storage-46b837f
              endpoint: s3.eu-central-1.amazonaws.com
              aws_sdk_auth: true
        env:
          - name: VOLUME_NAME
            value: prometheus-{{ printf "release-%s" .Release.Name }}-prometheus-db
        ports:
          - name: http
            containerPort: 10901
            protocol: TCP
          - name: grpc
            containerPort: 10902
            protocol: TCP
        volumeMounts:
          - mountPath: /prometheus
            #name: prometheus-{{ template "kube-prometheus-stack.fullname" . }}-prometheus-db
            name: prometheus-prometheus-kube-prometheus-prometheus-db
            subPath: prometheus-db
        securityContext:
          runAsNonRoot: true
          # Same as Prometheus to be able to read data in /data path
          runAsUser: 1000
          runAsGroup: 2000
    resources:
      requests:
        cpu: 1000m
        memory: 2048Mi
      limits:
        cpu: 2000m
        memory: 4096Mi
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: app
                  operator: In
                  values:
                    - prometheus
    tolerations: []
    podMetadata:
      labels:
        app: prometheus
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: prometheus
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: prometheus
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ebs
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi

alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx-external
    hosts:
      - alertmanager.dev.lokalise.cloud
    paths:
      - /
    pathType: Prefix
    tls: []
  alertmanagerSpec:
    replicas: 1
    retention: 120h
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: ebs
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
    affinity: {}
    tolerations: []

grafana:
  enabled: true
  adminPassword: prom-operator
  ingress:
    enabled: true
    ingressClassName: nginx-external
    hosts:
      - grafana.dev.lokalise.cloud
    paths:
      - /
    pathType: Prefix
    tls: []
  sidecar:
    dashboards:
      enabled: true
    datasources:
      enabled: true
  additionalDataSources:
    - name: thanos
      type: prometheus
      access: proxy
      url: http://thanos-query.monitoring.svc.cluster.local:9090
      isDefault: true

nodeExporter:
  enabled: true

extraManifests:
  - apiVersion: karpenter.sh/v1alpha5
    kind: Provisioner
    metadata:
      labels:
        app: prometheus
      name: prometheus
    spec:
      consolidation:
        enabled: false
      ttlSecondsAfterEmpty: 30
      ttlSecondsUntilExpired: 2592000
      labels:
        karpenter: enabled
        app: prometheus
      taints: []
      providerRef:
        name: bottlerocket
      requirements:
      - key: karpenter.k8s.aws/instance-category
        operator: In
        values:
          - t
      - key: karpenter.k8s.aws/instance-cpu
        operator: In
        values:
        - "2"
      - key: karpenter.k8s.aws/instance-memory
        operator: In
        values:
        - "4096"
      - key: kubernetes.io/arch
        operator: In
        values:
        - amd64
        - arm64
      - key: kubernetes.io/os
        operator: In
        values:
        - linux
      - key: karpenter.sh/capacity-type
        operator: In
        values:
        - on-demand
