extraDeploy:
  - apiVersion: karpenter.sh/v1alpha5
    kind: Provisioner
    metadata:
      labels:
        app: thanos
      name: thanos
    spec:
      consolidation:
        enabled: false
      labels:
        karpenter: enabled
        app: thanos
      taints: []
      providerRef:
        name: bottlerocket
      requirements:
      - key: karpenter.k8s.aws/instance-category
        operator: In
        values:
          - t
      - key: karpenter.k8s.aws/instance-cpu
        operator: In
        values:
        - "2"
      - key: karpenter.k8s.aws/instance-memory
        operator: In
        values:
        - "4096"
      - key: kubernetes.io/arch
        operator: In
        values:
        - arm64
      - key: kubernetes.io/os
        operator: In
        values:
        - linux
      - key: karpenter.sh/capacity-type
        operator: In
        values:
        - on-demand

objstoreConfig:
  type: S3
  config:
    bucket: thanos-storage-46b837f
    endpoint: s3.eu-central-1.amazonaws.com
    aws_sdk_auth: true

query:
  enabled: true
  replicaCount: 3
  podLabels:
    app: thanos-query
  logLevel: info
  logFormat: logfmt
  service:
    type: ClusterIP
    ports:
      http: 9090
    annotations: {}
  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    annotations: {}
  ingress:
    enabled: true
    ingressClassName: nginx-internet-facing
    annotations: {}
    labels: {}
    hostname: thanos-query.dev.lokalise.cloud
    pathType: Prefix
    path: /
    tls: false
    grpc:
      enabled: false
      hostname: thanos-query-grpc.dev.lokalise.cloud
  # Must be the same as `prometheus.prometheusSpec.replicaExternalLabelName` in Prometheus stack values
  replicaLabel: [prometheus_replica]
  stores:
    # Prometheus sidecar
    - prometheus-kube-prometheus-thanos-discovery.monitoring.svc.cluster.local:10902
    # Store gateway to get data from S3
    - thanos-storegateway.monitoring.svc.cluster.local:10901
  sdConfig: ""
  resources:
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 1024Mi
      cpu: 1
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - thanos
    podAntiAffinity:                                 
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:                               
          matchLabels:                               
            app: thanos-query
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: thanos-query
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: thanos-query

queryFrontend:
  enabled: false
  recplicaCount: 1
  podLabels: {}
  logLevel: info
  logFormat: logfmt

bucketweb:
  enabled: true
  recplicaCount: 1
  podLabels:
    app: thanos-bucketweb
  logLevel: info
  logFormat: json
  refresh: 5m
  timeout: 5m
  extraFlags: []
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::484308071187:role/eks-main-thanos-storage-a2b7f26
  ingress:
    enabled: true
    ingressClassName: nginx-internet-facing
    annotations: {}
    labels: {}
    hostname: thanos-bucketweb.dev.lokalise.cloud
    pathType: Prefix
    path: /
    tls: false
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 128Mi
      cpu: 100m
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - thanos

compactor:
  enabled: true
  podLabels:
    app: thanos-compactor
  logLevel: debug
  logFormat: logfmt
  retentionResolutionRaw: 7d
  retentionResolution5m: 30d
  retentionResolution1h: 1y
  consistencyDelay: 30m
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::484308071187:role/eks-main-thanos-storage-a2b7f26
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 128Mi
      cpu: 100m
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - thanos

storegateway:
  enabled: true
  replicaCount: 3
  podLabels:
    app: thanos-storegateway
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 10901
    annotations: {}
  extraFlags: []
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::484308071187:role/eks-main-thanos-storage-a2b7f26
  ingress:
    enabled: true
    ingressClassName: nginx-internet-facing
    annotations: {}
    labels: {}
    hostname: thanos-storegateway.dev.lokalise.cloud
    pathType: Prefix
    path: /
    tls: false
    grpc:
      enabled: false
      hostname: thanos-storegateway-grpc.dev.lokalise.cloud
  persistence:
    enabled: true
    storageClass: ebs
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  resources:
    # Increase to 2 CPU and 2Gi RAM
    requests:
      memory: 512Mi
      cpu: 500m
    limits:
      memory: 1024Mi
      cpu: 1
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: app
                operator: In
                values:
                  - thanos
    podAntiAffinity:                                 
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:                               
          matchLabels:                               
            app: thanos-storegateway
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: thanos-storegateway
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: thanos-storegateway
ruler:
  enabled: false

receive:
  enabled: false
  replicaCount: 3
  podLabels: {}
  tsdbRetention: 15d
  replicationFactor: 2
  logLevel: debug
  logFormat: logfmt
  service:
    type: ClusterIP
    ports:
      http: 10902
      grpc: 10901
      remote: 19291
    annotations: {}
  replicaLabel: replica

receiveDistributor:
  enabled: false

metrics:
  enabled: false
